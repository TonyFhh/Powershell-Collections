#xlsx to xlsb converter
# THis script will convert xlsx files within a folder into xlsb. Xlsb files take less space and open faster if users don't use data analysis tools.
# The new xlsb file will inherit the file times of the initial xlsx file

# Process Parameters
param(
[Parameter(Mandatory=$true)]
[ValidateScript({Test-Path $_ })][string]$result_path,
[string]$lookup = $null
)

function main () {

    # echo "results_path is $result_path"
    # echo "lookupfile is $lookup"

    # Parse the lookup file for duplicates
    if (!( [string]::IsNullOrEmpty($lookup) )) {
        if (Test-Path $lookup ) {
            $lookup_content = Import-Csv -Path $lookup -Delimiter ~
            $lookup_data = @{}
            foreach( $r in $lookup_content ) {
                if ( $lookup_data.ContainsKey($r.src) -or $lookup_data.ContainsValue($r.tgt) ) {
                    Throw "Ambiguous mapping src key $r found in lookup file, a pre-existing src or tgt key is already present."
                }
                $lookup_data[$r.src]=$r.tgt
            }
        } else {
            Throw "Invalid lookupfile path `"${_}`", Perhaps you forgot to quote the path?"
        }
    }
    
    #Check if $results_path is a single file or folder
    $ExcelWB = new-object -comobject excel.application
    if ( test-path $result_path -PathType Container ) {
#        echo "$result_path is folder"
        ls -path $result_path\* -Recurse -Include *.xlsb,*.xlsx | Foreach-Object {
#            echo "starting $_"
            file_check $_ #Wish i can make this work in background, but all the tedious stuff with Start-Job makes it unworthwhile
            sleep 1
        }
    } elseif ( test-path $result_path -Include *.xlsx,*.xlsb ) {
#        echo "$result_path is file"
        file_check $result_path
    } else {
        throw "Invalid path $result_path. Specify the path of a folder, xlsx or xlsb file"
    }
    $ExcelWB.quit()
    
    Show-BalloonTip(3) -Title "orphans.ps1" -MessageType Info -Message "Script has checking file orphans."
    
    [System.Runtime.Interopservices.Marshal]::ReleaseComObject($ExcelWB) | out-null #Release the object and suppress output (else it will print 0)
    [System.GC]::Collect() #Forces immediate Garbage Collection for all objects
}

function file_check($file) {

    if ( $file -match "_orphans\." ) { #match regex /_orphans./ literally, since we are comparing string object dont need $file.name
        echo "$file skipped as it appears to be a result generated by orphans.py"
        return
    }

    #Handle xlsb file
    if ( $((Get-Item $file ).Extension) -eq ".xlsb" ) {
        # Convert back to xlsx
#        echo "Converting $file to xlsx"
        $file_xlsxn = "$((Get-Item $file ).DirectoryName)\$((Get-Item $file ).BaseName).xlsx"
        
        $Workbook = $ExcelWB.Workbooks.Open($file)
        $Workbook.SaveAs($file_xlsxn,51)
        $Workbook.Close() | out-null
        
        check_orphans $file_xlsxn > $null
        
        Remove-Item $file_xlsxn -Force
    } else {
        check_orphans $file > $null
    }
}

function check_orphans($result_file) {

    if (!( [string]::IsNullOrEmpty($lookup) )) {
        echo "ran py w lookup"
        python orphans.py --lookup "$lookup" "$result_file"
    } else {
        echo "ran py wo"
        python orphans.py "$result_file"
    }
    
#    echo "Checking $result_file complete"
}

# Extra function to provide system tray notifications (copied here to improve portability to users)
function Show-BalloonTip {
    [cmdletbinding()]            
    param(            
     [parameter(Mandatory=$true)]            
     [string]$Title,            
     [ValidateSet("Info","Warning","Error")]             
     [string]$MessageType = "Info",            
     [parameter(Mandatory=$true)]            
     [string]$Message,            
     [string]$Duration=1000  
    )            

    [system.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms') | Out-Null            
    $balloon = New-Object System.Windows.Forms.NotifyIcon            
    $path = Get-Process -id $pid | Select-Object -ExpandProperty Path
    $icon = [System.Drawing.Icon]::ExtractAssociatedIcon($MyInvocation.PSCommandPath ) #Get application name of running shell and extract its icon (to show in system tray)           
    $balloon.Icon = $icon            
    $balloon.BalloonTipIcon = $MessageType            
    $balloon.BalloonTipText = $Message            
    $balloon.BalloonTipTitle = $Title            
    $balloon.Visible = $true 
    
    $balloon.ShowBalloonTip($Duration)
    sleep $Duration
#    $balloon.Visible = $false
    $balloon.Dispose()
}

main